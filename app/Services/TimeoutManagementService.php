<?php

namespace App\Services;

use App\Models\ModeratorProfileAssignment;
use App\Events\ModeratorInactivityDetected;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;
use Carbon\Carbon;

class TimeoutManagementService
{
    protected $inactivityThreshold = 60; // Secondes avant inactivit√©
    protected $warningThreshold = 30; // Secondes avant avertissement
    protected $activeTimersKey = 'active_inactivity_timers'; // Cl√© pour maintenir la liste des timers actifs

    /**
     * D√©marre un timer d'inactivit√© pour une assignation mod√©rateur-profil
     */
    public function startInactivityTimer($moderatorId, $profileId, $clientId = null)
    {
        $key = $this->getTimerKey($moderatorId, $profileId);
        $expiresAt = now()->addSeconds($this->inactivityThreshold);

        $timerData = [
            'moderator_id' => $moderatorId,
            'profile_id' => $profileId,
            'client_id' => $clientId,
            'started_at' => now(),
            'expires_at' => $expiresAt,
            'warning_sent' => false
        ];

        // Stocker le timer dans le cache
        Cache::put($key, $timerData, $expiresAt->addMinutes(1));

        // Ajouter la cl√© √† la liste des timers actifs
        $this->addToActiveTimers($key);

        Log::info("Timer d'inactivit√© d√©marr√©", [
            'moderator_id' => $moderatorId,
            'profile_id' => $profileId,
            'expires_at' => $expiresAt->toDateTimeString()
        ]);

        return $timerData;
    }

    /**
     * Annule un timer d'inactivit√©
     */
    public function cancelTimer($moderatorId, $profileId)
    {
        $key = $this->getTimerKey($moderatorId, $profileId);

        if (Cache::has($key)) {
            Cache::forget($key);
            $this->removeFromActiveTimers($key);

            Log::info("Timer d'inactivit√© annul√©", [
                'moderator_id' => $moderatorId,
                'profile_id' => $profileId
            ]);

            return true;
        }

        return false;
    }

    /**
     * R√©initialise un timer d'inactivit√©
     */
    public function resetTimer($moderatorId, $profileId, $clientId = null)
    {
        $lockKey = "timer_reset_lock:{$moderatorId}:{$profileId}";

        // Utiliser un verrou pour √©viter les conflits de concurrence
        return Cache::lock($lockKey, 5)->get(function () use ($moderatorId, $profileId, $clientId) {
            // Annuler l'ancien timer
            $this->cancelTimer($moderatorId, $profileId);

            // D√©marrer un nouveau timer
            return $this->startInactivityTimer($moderatorId, $profileId, $clientId);
        });
    }

    /**
     * Prolonge un timer d'inactivit√©
     */
    public function extendTimeout($moderatorId, $profileId, $minutes = 2)
    {
        $key = $this->getTimerKey($moderatorId, $profileId);

        if (Cache::has($key)) {
            $timerData = Cache::get($key);

            // Prolonger le d√©lai d'expiration
            $expiresAt = Carbon::parse($timerData['expires_at'])->addMinutes($minutes);
            $timerData['expires_at'] = $expiresAt;
            $timerData['warning_sent'] = false;

            // Mettre √† jour le timer dans le cache
            Cache::put($key, $timerData, $expiresAt->addMinutes(1));

            Log::info("Timer d'inactivit√© prolong√©", [
                'moderator_id' => $moderatorId,
                'profile_id' => $profileId,
                'new_expires_at' => $expiresAt->toDateTimeString()
            ]);

            return true;
        }

        return false;
    }

    /**
     * Accuse r√©ception d'un timer d'inactivit√©
     */
    public function acknowledgeTimeout($moderatorId, $profileId)
    {
        $key = $this->getTimerKey($moderatorId, $profileId);

        if (Cache::has($key)) {
            $timerData = Cache::get($key);

            // Marquer l'avertissement comme reconnu
            $timerData['warning_acknowledged'] = true;

            // Mettre √† jour le timer dans le cache
            Cache::put($key, $timerData, Carbon::parse($timerData['expires_at'])->addMinutes(1));

            Log::info("Timer d'inactivit√© reconnu", [
                'moderator_id' => $moderatorId,
                'profile_id' => $profileId
            ]);

            return true;
        }

        return false;
    }

    // Ajouter cette m√©thode temporaire pour le debug
    public function debugActiveTimers()
    {
        $activeKeys = $this->getActiveTimers();

        Log::info("üîç [DEBUG] Liste des timers actifs", [
            'count' => count($activeKeys),
            'keys' => $activeKeys
        ]);

        foreach ($activeKeys as $key) {
            $timerData = Cache::get($key);
            if ($timerData) {
                $expiresAt = Carbon::parse($timerData['expires_at']);
                $now = now();
                $remainingSeconds = $expiresAt->diffInSeconds($now, false);

                Log::info("üîç [DEBUG] Timer d√©tails", [
                    'key' => $key,
                    'moderator_id' => $timerData['moderator_id'],
                    'profile_id' => $timerData['profile_id'],
                    'expires_at' => $expiresAt->toDateTimeString(),
                    'current_time' => $now->toDateTimeString(),
                    'remaining_seconds' => $remainingSeconds,
                    'is_expired' => $remainingSeconds < 0 ? 'OUI' : 'NON'
                ]);
            } else {
                Log::warning("üîç [DEBUG] Timer key sans donn√©es: " . $key);
            }
        }
    }
    /**
     * V√©rifie les timers d'inactivit√© et envoie des avertissements si n√©cessaire
     */
    public function checkTimers()
    {
        Log::info("üöÄ [DEBUG] checkTimers() D√âMARR√â - " . now()->toDateTimeString());

        $activeKeys = $this->getActiveTimers();
        Log::info("üöÄ [DEBUG] checkTimers() D√âMARR√â - " . now()->toDateTimeString());

        $processedCount = 0;
        $expiredCount = 0;
        $warningsCount = 0;

        Log::debug("[TimeoutManagementService] D√©but de checkTimers", [
            'active_timers_count' => count($activeKeys),
            'current_time' => now()->toDateTimeString()
        ]);

        foreach ($activeKeys as $key) {
            $timerData = Cache::get($key);

            if (!$timerData) {
                Log::info("üîç [DEBUG] Timer data manquant pour key: " . $key);
                $this->removeFromActiveTimers($key);
                continue;
            }

            $now = now();
            $expiresAt = Carbon::parse($timerData['expires_at']);
            // Temps restant = temps d'expiration - temps actuel
            $remainingSeconds = $expiresAt->diffInSeconds($now, false);

            // Si le r√©sultat est n√©gatif, le timer a expir√©
            $isExpired = $remainingSeconds < 0;
            $remainingSeconds = abs($remainingSeconds); // Valeur absolue pour les logs

            Log::debug("[TimeoutManagementService] V√©rification timer", [
                'key' => $key,
                'moderator_id' => $timerData['moderator_id'],
                'profile_id' => $timerData['profile_id'],
                'expires_at' => $expiresAt->toDateTimeString(),
                'current_time' => $now->toDateTimeString(),
                'remaining_seconds' => $remainingSeconds,
                'expires_at_timestamp' => $expiresAt->timestamp,
                'current_time_timestamp' => $now->timestamp,
                'is_expired' => $isExpired ? 'OUI' : 'NON',
                'calculation_method' => 'expires_at - now',
                'should_call_expiration' => $isExpired ? 'OUI' : 'NON'

            ]);

            // Si le timer a expir√©
            if ($isExpired) {
                Log::info("üö® [DEBUG] TIMER EXPIR√â - Appel de handleTimeoutExpiration");
                $this->handleTimeoutExpiration($timerData);
                $expiredCount++;
                Log::info("üö® [DEBUG] handleTimeoutExpiration termin√©");
                continue;
            }

            // Si l'avertissement n'a pas √©t√© envoy√© et qu'on est dans la p√©riode d'avertissement
            if (!$timerData['warning_sent'] && $remainingSeconds <= $this->warningThreshold) {
                Log::info("‚ö†Ô∏è [TimeoutManagementService] Envoi d'avertissement", [
                    'moderator_id' => $timerData['moderator_id'],
                    'profile_id' => $timerData['profile_id'],
                    'remaining_seconds' => $remainingSeconds
                ]);

                $this->sendWarning($timerData, $remainingSeconds);

                // Marquer l'avertissement comme envoy√©
                $timerData['warning_sent'] = true;
                Cache::put($key, $timerData, $expiresAt->addMinutes(1));
                $warningsCount++;
            }

            $processedCount++;
        }

        Log::info("‚úÖ [TimeoutManagementService] V√©rification des timers termin√©e", [
            'processed' => $processedCount,
            'expired' => $expiredCount,
            'warnings_sent' => $warningsCount
        ]);

        return [
            'processed' => $processedCount,
            'expired' => $expiredCount,
            'warnings_sent' => $warningsCount
        ];
    }

    /**
     * G√®re l'expiration d'un timer d'inactivit√©
     */
    public function handleTimeoutExpiration($timerData)
    {
        Log::info("üéØ [DEBUG] handleTimeoutExpiration() APPEL√â !");
        $moderatorId = $timerData['moderator_id'];
        $profileId = $timerData['profile_id'];
        $clientId = $timerData['client_id'] ?? null;

        Log::info("‚è±Ô∏è [TimeoutManagementService] D√âBUT du traitement de l'expiration du timer", [
            'moderator_id' => $moderatorId,
            'profile_id' => $profileId,
            'client_id' => $clientId,
            'timestamp' => now()->toDateTimeString(),
            'timer_started_at' => $timerData['started_at'] ?? 'unknown',
            'timer_expires_at' => $timerData['expires_at'] ?? 'unknown'
        ]);

        try {
            // V√©rifier que l'assignation existe encore
            Log::info("üéØ [DEBUG] V√©rification de l'assignation...");
            $assignment = ModeratorProfileAssignment::where('user_id', $moderatorId)
                ->where('profile_id', $profileId)
                ->where('is_active', true)
                ->first();

            Log::info("üéØ [DEBUG] R√©sultat assignation", [
                'found' => $assignment ? 'OUI' : 'NON',
                'assignment_id' => $assignment->id ?? 'N/A'
            ]);

            if (!$assignment) {
                Log::warning("‚ö†Ô∏è [TimeoutManagementService] Assignation non trouv√©e ou d√©j√† inactive", [
                    'moderator_id' => $moderatorId,
                    'profile_id' => $profileId
                ]);

                // Nettoyer le timer
                $this->cancelTimer($moderatorId, $profileId);
                return false;
            }

            Log::debug("üì£ [TimeoutManagementService] Cr√©ation de l'√©v√©nement ModeratorInactivityDetected", [
                'moderator_id' => $moderatorId,
                'profile_id' => $profileId,
                'client_id' => $clientId,
                'assignment_id' => $assignment->id
            ]);

            // Cr√©ation de l'√©v√©nement
            Log::info("üéØ [DEBUG] Cr√©ation de l'√©v√©nement...");
            $event = new ModeratorInactivityDetected($moderatorId, $profileId, $clientId);
            Log::info("üéØ [DEBUG] √âv√©nement cr√©√©: " . get_class($event));


            Log::info("üì£ [TimeoutManagementService] D√âCLENCHEMENT de l'√©v√©nement", [
                'event_class' => get_class($event),
                'moderator_id' => $moderatorId,
                'profile_id' => $profileId,
                'client_id' => $clientId
            ]);

            // D√©clenchement de l'√©v√©nement
            // D√©clenchement
            Log::info("üéØ [DEBUG] D√âCLENCHEMENT de l'√©v√©nement...");
            event($event);
            Log::info("üéØ [DEBUG] √âv√©nement d√©clench√© - SUCCESS !");

            Log::info("‚úÖ [TimeoutManagementService] √âv√©nement d√©clench√© avec SUCC√àS", [
                'moderator_id' => $moderatorId,
                'profile_id' => $profileId
            ]);

            // Supprimer le timer apr√®s traitement r√©ussi
            Log::info("üéØ [DEBUG] Nettoyage du timer...");
            $this->cancelTimer($moderatorId, $profileId);
            Log::info("üéØ [DEBUG] Timer nettoy√© - SUCCESS !");

            Log::info("üéØ [DEBUG] handleTimeoutExpiration() TERMIN√â avec succ√®s");
            return true;
        } catch (\Throwable $e) {
            Log::error("‚ùå [TimeoutManagementService] ERREUR CRITIQUE lors du traitement", [
                'error_message' => $e->getMessage(),
                'error_file' => $e->getFile(),
                'error_line' => $e->getLine(),
                'trace' => $e->getTraceAsString(),
                'moderator_id' => $moderatorId,
                'profile_id' => $profileId,
                'client_id' => $clientId
            ]);

            // Ne pas supprimer le timer en cas d'erreur pour pouvoir r√©essayer
            throw $e;
        }

        return true;
    }

    /**
     * Envoie un avertissement d'inactivit√©
     */
    protected function sendWarning($timerData, $remainingSeconds)
    {
        $moderatorId = $timerData['moderator_id'];
        $profileId = $timerData['profile_id'];

        Log::info("‚ö†Ô∏è [TimeoutManagementService] Envoi d'un avertissement d'inactivit√©", [
            'moderator_id' => $moderatorId,
            'profile_id' => $profileId,
            'remaining_seconds' => $remainingSeconds
        ]);

        try {
            // Diffuser l'√©v√©nement d'avertissement
            broadcast(new \App\Events\ModeratorInactivityWarning(
                $moderatorId,
                $profileId,
                $remainingSeconds
            ));

            Log::info("‚úÖ [TimeoutManagementService] Avertissement envoy√© avec succ√®s", [
                'moderator_id' => $moderatorId,
                'profile_id' => $profileId
            ]);
        } catch (\Throwable $e) {
            Log::error("‚ùå [TimeoutManagementService] Erreur lors de l'envoi d'avertissement", [
                'error' => $e->getMessage(),
                'moderator_id' => $moderatorId,
                'profile_id' => $profileId
            ]);
        }

        return true;
    }

    /**
     * Retourne tous les timers actifs avec leurs donn√©es
     */
    public function getActiveTimersData()
    {
        $activeKeys = $this->getActiveTimers();
        $timers = [];

        foreach ($activeKeys as $key) {
            $timerData = Cache::get($key);
            if ($timerData) {
                $timers[] = $timerData;
            } else {
                // Nettoyer les cl√©s orphelines
                $this->removeFromActiveTimers($key);
            }
        }

        return $timers;
    }

    /**
     * Nettoie les timers expir√©s ou orphelins
     */
    public function cleanupExpiredTimers()
    {
        $activeKeys = $this->getActiveTimers();
        $cleaned = 0;

        foreach ($activeKeys as $key) {
            $timerData = Cache::get($key);

            if (!$timerData || Carbon::parse($timerData['expires_at'])->isPast()) {
                Cache::forget($key);
                $this->removeFromActiveTimers($key);
                $cleaned++;
            }
        }

        if ($cleaned > 0) {
            Log::info("üßπ [TimeoutManagementService] Nettoyage des timers expir√©s", [
                'cleaned_count' => $cleaned
            ]);
        }

        return $cleaned;
    }

    /**
     * G√©n√®re la cl√© de cache pour un timer
     */
    protected function getTimerKey($moderatorId, $profileId)
    {
        return "inactivity_timer:{$moderatorId}:{$profileId}";
    }

    /**
     * Ajoute une cl√© √† la liste des timers actifs
     */
    protected function addToActiveTimers($key)
    {
        $activeTimers = Cache::get($this->activeTimersKey, []);

        if (!in_array($key, $activeTimers)) {
            $activeTimers[] = $key;
            Cache::put($this->activeTimersKey, $activeTimers, now()->addHours(2));
        }
    }

    /**
     * Supprime une cl√© de la liste des timers actifs
     */
    protected function removeFromActiveTimers($key)
    {
        $activeTimers = Cache::get($this->activeTimersKey, []);
        $activeTimers = array_filter($activeTimers, function ($activeKey) use ($key) {
            return $activeKey !== $key;
        });

        Cache::put($this->activeTimersKey, array_values($activeTimers), now()->addHours(2));
    }

    /**
     * Retourne la liste des cl√©s des timers actifs
     */
    protected function getActiveTimers()
    {
        return Cache::get($this->activeTimersKey, []);
    }

    /**
     * Retourne des statistiques sur les timers
     */
    public function getTimerStats()
    {
        $activeKeys = $this->getActiveTimers();
        $stats = [
            'total_active' => count($activeKeys),
            'warning_zone' => 0,
            'expired' => 0,
            'by_moderator' => []
        ];

        foreach ($activeKeys as $key) {
            $timerData = Cache::get($key);
            if (!$timerData) continue;

            $moderatorId = $timerData['moderator_id'];
            $expiresAt = Carbon::parse($timerData['expires_at']);
            $now = now();

            // Calcul correct du temps restant
            $remainingSeconds = $expiresAt->diffInSeconds($now, false);
            $isExpired = $remainingSeconds < 0;
            $remainingSeconds = abs($remainingSeconds);

            // Compter par mod√©rateur
            if (!isset($stats['by_moderator'][$moderatorId])) {
                $stats['by_moderator'][$moderatorId] = 0;
            }
            $stats['by_moderator'][$moderatorId]++;

            // Compter les timers en zone d'avertissement ou expir√©s
            if ($isExpired) {
                $stats['expired']++;
            } elseif ($remainingSeconds <= $this->warningThreshold) {
                $stats['warning_zone']++;
            }
        }

        return $stats;
    }
}
