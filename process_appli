# Fonctionnement de l'Application HeartMatch

## Vue d'ensemble

L'application HeartMatch est une plateforme de rencontres utilisant Laravel comme framework backend et Vue.js avec Inertia pour le frontend. Elle met en relation des clients avec des modérateurs qui animent des profils fictifs.

## Architecture et fonctionnement principal

### Fichiers clés et leurs rôles

#### Structure de base

-   **resources/views/app.blade.php** : Le template principal qui initialise l'application et configure les métadonnées pour l'authentification.
-   **resources/js/client.js** : Point d'entrée pour l'interface client qui initialise Vue.js, Pinia (gestion d'état) et configure Axios.
-   **resources/js/bootstrap.js** : Configure les services essentiels comme Axios et les WebSockets via Laravel Echo.

#### Gestion d'état (Stores)

-   **resources/js/stores/clientStore.js** : Store Pinia centralisant la gestion des messages, points et conversations pour les clients.
-   **resources/js/stores/moderatorStore.js** : Store Pinia gérant les profils, clients et messages pour les modérateurs.

#### Services

-   **resources/js/services/WebSocketManager.js** : Service qui gère la communication en temps réel via WebSockets (connexions, abonnements aux canaux).
-   **resources/js/services/AuthenticationService.js** : Service gérant l'authentification, les tokens CSRF et la session utilisateur.
-   **app/Services/WebSocketHealthService.php** : Service backend surveillant l'état des connexions WebSocket.

#### Contrôleurs

-   **app/Http/Controllers/Moderator/ModeratorController.php** : Gère les fonctionnalités des modérateurs (messages, profils assignés).
-   **app/Http/Controllers/Client/HomeController.php** : Contrôle la page d'accueil du client et ses interactions.
-   **app/Http/Controllers/Auth/LoginController.php** : Gère l'authentification des utilisateurs.

#### Interfaces utilisateurs

-   **resources/js/Client/Pages/Home.vue** : Interface principale pour les clients, affichant les profils et conversations.
-   **resources/js/Client/Pages/Moderator.vue** : Interface pour les modérateurs, permettant de gérer les conversations avec les clients.

#### Routage et canaux

-   **routes/web.php** : Définit les routes HTTP pour l'application, séparant les accès clients, modérateurs et administrateurs.
-   **routes/channels.php** : Configure les canaux de diffusion WebSocket pour la communication en temps réel.

#### Modèles (Models)

-   **User** : Modèle principal représentant tous les utilisateurs (clients, modérateurs, administrateurs) avec leurs informations d'authentification.
-   **Profile** : Représente les profils fictifs gérés par les modérateurs pour interagir avec les clients.
-   **Message** : Stocke les messages échangés entre clients et profils, avec référence au modérateur responsable.
-   **ClientProfile** : Contient les informations complètes du profil d'un client (orientation, âge, préférences).
-   **ClientInfo** : Stocke des informations basiques sur les clients (ville, profession, etc.).
-   **ClientCustomInfo** : Permet aux modérateurs d'ajouter des notes personnalisées sur les clients.
-   **ConversationState** : Gère l'état des conversations (messages non lus, attente de réponse).
-   **ModeratorProfileAssignment** : Établit la relation entre modérateurs et profils qu'ils gèrent.
-   **ModeratorStatistic** : Enregistre les statistiques de performance des modérateurs.
-   **PointConsumption** : Trace l'utilisation des points par les clients.
-   **PointTransaction** : Enregistre les achats de points par les clients.
-   **ProfilePointTransaction** : Gère les transferts de points des clients vers des profils spécifiques.
-   **ProfilePhoto** : Stocke les photos associées aux profils.
-   **ProfileReport** : Enregistre les signalements de profils par les clients.
-   **MessageAttachment** : Gère les pièces jointes des messages.

## Flux de fonctionnement

1. L'utilisateur se connecte via le **LoginController**, qui l'authentifie et le redirige selon son type.
2. Le template **app.blade.php** charge les scripts appropriés et initialise les métadonnées d'authentification.
3. L'application frontend s'initialise via **client.js** ou **admin.js** selon le type d'utilisateur.
4. **WebSocketManager** établit une connexion en temps réel pour les notifications et messages.
5. Les stores (**clientStore** ou **moderatorStore**) chargent les données initiales et gèrent l'état de l'application.
6. Pour les clients, **Home.vue** affiche les profils disponibles et les conversations.
7. Pour les modérateurs, **Moderator.vue** permet de voir les clients assignés et d'interagir avec eux.
8. Les messages sont échangés via WebSockets à travers les canaux définis dans **channels.php**.
9. **WebSocketHealthService** surveille la santé des connexions pour assurer la stabilité.

## Relations entre les modèles

-   Un **User** peut avoir différents rôles : client, modérateur ou administrateur.
-   Les **Modérateurs** sont assignés à des **Profils** via **ModeratorProfileAssignment**.
-   Les **Clients** communiquent avec des **Profils** en envoyant des **Messages**.
-   Les **Messages** peuvent contenir des **MessageAttachments** (pièces jointes).
-   Les **Clients** achètent des **Points** via des **PointTransactions**.
-   Les **Points** sont dépensés pour envoyer des messages via **PointConsumption**.
-   L'état des conversations est suivi via **ConversationState** pour gérer les notifications.

Cette architecture permet une communication en temps réel efficace entre clients et modérateurs, avec une séparation claire des responsabilités entre les différentes couches de l'application.
